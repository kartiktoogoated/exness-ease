// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Asset {
  symbol         String  @id          
  name           String
  priceDecimals  Int     
  qtyDecimals    Int    
  imageUrl       String?
  Orders         Order[]
  Balances       Balance[]
  Ticks          Tick[]
}
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      String    @default("User")
  balances  Balance[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Balance {
  id        String  @id @default(uuid())
  userId    String
  assetId   String 
  qtyInt    BigInt  

  user      User    @relation(fields: [userId], references: [id])
  asset     Asset   @relation(fields: [assetId], references: [symbol])

  @@unique([userId, assetId])
}
model Order {
  id          String      @id @default(uuid())
  userId      String
  assetId     String      

  type        OrderType   
  status      TradeStatus @default(OPEN) 

  qtyInt      BigInt

  openPrice   BigInt
  closePrice  BigInt?

  leverage    Int         @default(1)
  marginInt   BigInt      @default(0)  

  pnlInt      BigInt?

  createdAt   DateTime    @default(now())
  closedAt    DateTime?

  user        User        @relation(fields: [userId], references: [id])
  asset       Asset       @relation(fields: [assetId], references: [symbol])

  @@index([userId, status, createdAt])
}

model Tick {
  assetId String
  ts      DateTime
  price   BigInt   

  asset   Asset    @relation(fields: [assetId], references: [symbol])

  @@id([assetId, ts])
  @@index([assetId, ts])
}

enum OrderType {
  BUY
  SELL
}

enum TradeStatus {
  OPEN
  CLOSED
  LIQUIDATED
}
